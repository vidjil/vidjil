# Step 0, independant: deploy_review, deploy_review_server
# Step 1, quicker: test_tools, test_browser_unit, code_quality_custom, test_server_unit
# Step 2, moderate:
#   client: client_firefox_supported, tuto-c1-ff-supported
#   server: server_firefox_supported, tuto-s1-ff-supported
# Step 3, late, longuer or tricky: 


.before_script_global: &before_script_global
  - make demo
  - make data
  - make germline
  - make -C browser sha1
  - cp -p doc/analysis-example.vidjil browser/
  - echo $CI_COMMIT_REF_SLUG

.before_script_global_docker: &before_script_global_docker
  before_script:
    - apt update && apt upgrade -y && apt install -y make unzip wget
    - *before_script_global

before_script:
  - *before_script_global

stages:
  - test_tools
  - test_quality
  - build_test_server_docker
  - test_unit
  - deploy_review
  - test_germlines
  - test_functional
  - test_cypress_client
  - test_cypress_external
  - test_cypress_server
  - test_server_api
  - test_tutorial
  - test_tutorial_server
  - test_shouldvdj
  - coverage
  - tgz_release
  - valgrind_unit
  - valgrind_functional
  - multiple_tests
  - benchmark
  - publish_release
  - deploy_prod


# Tools

test_tools:
  image: registry.gitlab.inria.fr/vidjil/vidjil/cypress_with_browsers:latest
  stage: test_tools
  script:
    - apt-get update && apt-get install -y python3-pip
    - pip3 install beautifulsoup4 bs4 tabulate requests requests-toolbelt urllib3
    - make -C tools/tests
  artifacts:
    reports:
      junit: tools/tests/should.xml
    expire_in: 7 day
    when: always
  extends:
    - .need_for_quick_test
  tags:
    - cidocker


# Germlines

test_germlines:
  image: registry.gitlab.inria.fr/vidjil/vidjil/cypress_with_browsers:latest
  stage: test_germlines
  script:
    - make -C germline get-all-data
    - make -C germline tests
  only:
    - /^feature-.*g.*\/.*$/
  tags:
    - cidocker


# Includes

include:
  - local: '.gitlab-test-reproducibility.yml' # launch tests many times
  - local: '/doc/.gitlab-ci.yml' # Doc
  - local: 'algo/.gitlab-ci-compilers.yml' # Stage multiple_tests
  - local: 'algo/.gitlab-ci.yml' # Vidjil-algo pipelines
  - local: 'browser/.gitlab-ci.yml' # Client pipelines
  - local: 'server/.gitlab-ci.yml' # Server pipelines
  - local: 'tools/.gitlab-ci.yml' # Tools/API pipelines
  - template: Code-Quality.gitlab-ci.yml # Code quality

###########################
###  Needs declaration  ###
###########################
.need_for_independant_test:
  needs: []

.need_for_quick_test:
  needs: []

### Client part should not containt server stage
.need_for_moderate_client:
  needs: [test_tools, test_browser_unit, code_quality_custom]
.need_for_staged_client:
  needs: [client1-ff-supported, external1-ff-supported]
.need_for_late_client:
  needs: [client1-ff-supported, external1-ff-supported, tuto-c1-ff-supported]

### Server part should not containt client stage
.need_for_moderate_server:
  needs: [test_tools, test_server_unit, build_test_server_docker]
.need_for_late_server:
  needs: [server1-ff-supported, tuto-s1-ff-supported]
.need_for_staged_server:
  needs: [server1-ff-supported, tuto-s1-ff-supported]



# Algorithm

algo_valgrind_unit:
  stage: valgrind_unit
  script: make -C algo valgrind_unit
  only:
    - /^feature-.*a.*\/.*$/
    - schedules
  tags:
    - valgrind

.snip_valgrind_functional: &valgrind_functional
  stage: valgrind_functional
  script: make -C algo valgrind_should
  tags:
    - valgrind

algo_valgrind_functional:
  <<: *valgrind_functional
  when: manual
  dependencies: []
  only:
    - /^feature-.*a.*\/.*$/
    - schedules

release_valgrind_functional:
  <<: *valgrind_functional
  allow_failure: true
  only:
    - /^feature-.*a.*\/release$/

tgz_release:
  stage: tgz_release
  script: make -C algo release RELEASE_TAG=`cat algo/release`
  only:
    - /^feature-.*a.*\/release$/
  artifacts:
    paths:
    - algo/releases/vidjil-algo-`cat algo/release`.tar.gz
    - algo/releases/vidjil-algo-`cat algo/release`/vidjil-algo-`cat algo/release`_`uname -m`
    expire_in: 10 years
  allow_failure: false
  tags:
    - ubuntu-16.04-amd64

copy_release:
  stage: publish_release
  script:
    - |
      for repo in $ALGO_REPOSITORIES; do
        echo "Copying release to $repo"
        scp algo/releases/vidjil-algo*.tar.gz algo/releases/vidjil-algo*/vidjil-algo-*_* $repo
      done
      release_name=$(cat algo/release)
      ssh $VIDJIL_WWW "cd /var/www/html/releases; ln -sf vidjil-algo-${release_name}.tar.gz vidjil-algo-latest.tgz; ln -sf vidjil-algo-${release_name}_x86_64 vidjil-algo-latest_x86_64"
      ssh $VIDJIL_BONSAI "cd /bio1/www/html/vidjil; scp vidjil-algo-${release_name}* $VIDJIL_BONSAI_PROD:/bio1/www/html/vidjil"
  when: manual
  only:
    - /^feature-.*a.*\/release$/

deploy_release_prod:
  stage: deploy_prod
  when: manual
  only:
    - /^feature-.*a.*\/release$/
  script:
    - |
      release_name=$(cat algo/release)
      ssh $DEPLOY_SERVER "cd releases/vidjil;\
          tar xvzf vidjil-algo-${release_name}.tar.gz;\
          make -C vidjil-algo-${release_name};\
          ln -sfT vidjil-algo-${release_name} next"

# Client

test_browser_unit:
  image: registry.gitlab.inria.fr/vidjil/vidjil/cypress_with_browsers:latest
  stage: test_unit
  script: 
    - npm -v
    - npm install --save-dev qunit
    - npm link nightmare --unsafe-perm=true ;
    - apt-get update && apt-get -y install xvfb grep
    - make unit_browser
  artifacts:
    paths:
    - browser/
    when: always
  only:
    - /^feature-.*c.*\/.*$/
    - /^hotfix-.*c.*\/.*$/
    - /^prod-client/
    - dev
    - schedules
  tags:
    - cidocker
  extends:
    - .need_for_quick_test



# Code quality

code_quality:
  stage: test_quality
  artifacts:
    paths: [gl-code-quality-report.json]

code_quality_custom:
  image: registry.gitlab.inria.fr/vidjil/vidjil/cypress_with_browsers:latest
  stage: test_quality
  script:
    - npm install -g jshint
    - make -C browser quality
  only:
    - /^feature-.*c.*\/.*$/
    - /^hotfix-.*c.*\/.*$/
    - /^prod-client/
    - dev
    - schedules
  tags:
    - cidocker
  extends:
    - .need_for_quick_test

# Server

test_server_unit:
    image: python:3.8-slim
    stage: test_unit
    <<: *before_script_global_docker
    script:
      - apt-get update && apt-get upgrade -y && apt-get install -y --no-install-recommends gcc libldap2-dev libssl-dev libsasl2-dev python3-ijson libyajl2 python3-cffi wget unzip procps libffi-dev
      - python3 -m pip install -U pip
      - python3 -m pip install --no-cache -r server/unit_requirements.txt
      - mkdir -p /mnt/upload/uploads/
      - wget http://www.vidjil.org/releases/vidjil-latest_x86_64 && mv vidjil-latest_x86_64 vidjil-algo && chmod +x vidjil-algo
      - make unit_server
    coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
    artifacts:
      reports:
        junit: server/unit_report.xml
        coverage_report:
          coverage_format: cobertura
          path: server/unit_coverage.xml
    only:
      - /^feature-.*s.*\/.*$/
      - /^hotfix-.*s.*\/.*$/
      - /^prod-server/
      - dev
      - schedules
    tags:
      - cidocker
    extends:
      - .need_for_quick_test


.setup_docker_server:
    # Build specific version of docker images
    - echo "CI_COMMIT_REF_NAME - $CI_COMMIT_REF_NAME"
    ### Use released py4web server image as base
    - echo "TIME $(date) - before pulling docker images" >> time.log
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE_NAME_CLIENT
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE_NAME_SERVER
    - docker tag $CI_REGISTRY_IMAGE/$IMAGE_NAME_CLIENT vidjil/client:test
    - docker tag $CI_REGISTRY_IMAGE/$IMAGE_NAME_SERVER vidjil/server:test
    - echo "TIME $(date) - after pulling docker images" >> time.log
    - sed -i '/\:\/etc\/nginx\/ssl/d' ./docker/docker-compose.yml
    - sed -i '/\/var\/lib\/mysql/d' ./docker/docker-compose.yml 
    - echo -e "volumes:\n    databases:" >> docker/docker-compose.yml
    - sed -i 's/latest/test/g' ./docker/docker-compose.yml
    # Replace path for some volumes
    # Use http version of config
    - cd docker/vidjil-server/conf/ && mv defs.py defs_https.py && mv defs_http.py defs.py && cd ../../..
    - make germline && cp browser/js/germline.js docker/vidjil-client/conf
    - mkdir -p docker/postfix/ssl
    - sed -i "s/^\(FILE_SOURCE .*\)/FILE_SOURCE = '\/usr\/share\/vidjil\/demo'/" docker/vidjil-server/conf/defs.py
    # Up py4web
    - cd docker
    - cp .env-default .env
    - echo "UWSGI_POOL=1" >> .env
    - mkdir -p volumes
    - docker-compose config
    - docker-compose up -d mysql uwsgi
    - echo "TIME $(date) - after first compose up" >> ../time.log
    # Set rights
    - docker exec docker_uwsgi_1 mkdir -p /usr/share/vidjil/server/py4web/apps/vidjil/errors/
    - docker exec docker_mysql_1 chmod 0777 /var/lib/mysql/vidjil -R
    - docker exec docker_uwsgi_1 chmod 0777 /usr/share/vidjil/server/py4web/apps/vidjil/databases -R
    - docker exec docker_uwsgi_1 chmod 0777 /mnt/result/results   -R
    - docker exec docker_uwsgi_1 chmod 0777 /mnt/result/tmp
    - docker exec docker_uwsgi_1 chmod 0777 /mnt/upload/uploads   -R
    - docker exec docker_uwsgi_1 chmod 0777 /usr/share/tools      -R
    - chmod 777 -R volumes/vidjil/
    # Start other docker images
    - docker-compose up -d
    # Show some information on current states of docker services
    - docker ps
    # Execute a script of init database and moke (fake ?) data inside; to be launch before executing tests
    - docker exec docker_uwsgi_1 bash -c "cd /usr/share/vidjil/server/py4web/apps/vidjil/tests/functional/ && python3 init_test_db.py"
    # Change File source definition in defs.py file 
    - cd .. # Go to root git directory
    - echo "TIME $(date) - before other server script" >> time.log


.test_server_base_dind:
  image:
    name: pandoc/core:latest
    entrypoint: [""]
  stage: test_functional
  services:
    - docker:dind
  before_script:
    - apk update
    - apk add docker docker-compose make wget tar
    - !reference [.setup_docker_server]
  after_script:
    - echo "TIME $(date) - END OF SERVER JOB" >> time.log
    - docker cp docker_uwsgi_1:/usr/share/vidjil/server/py4web/apps/vidjil/errors/ server/py4web/apps/vidjil/
    - docker ps
    - mkdir -p logs/after; for service in mysql fuse uwsgi workers flower nginx; do docker logs docker_${service}_1  > logs/after/${service}.log 2>&1; done
    - cd docker && docker-compose down -v
    - cd .. && cat time.log
    - docker rmi "vidjil/server:test" "vidjil/client:test"
    - docker rmi $CI_REGISTRY_IMAGE/$IMAGE_NAME_CLIENT $CI_REGISTRY_IMAGE/$IMAGE_NAME_SERVER
  variables:
    IMAGE_NAME_CLIENT: dev-client/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}
    IMAGE_NAME_SERVER: dev-server/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}
  only:
    - /^feature-.*s.*\/.*$/
    - /^hotfix-.*s.*\/.*$/
    - /^prod-server/
    - dev
    - schedules
  tags:
    - ci.inria.fr
    - medium


# Deployment

deploy_review:
  stage: deploy_review
  script:
    - make -C browser icons
    - echo "$REVIEW_CONFIG_JS" > browser/js/conf.js
    - rsync -av --delete browser $REVIEW_SERVER:$REVIEW_SERVER_PATH$CI_COMMIT_REF_SLUG
  dependencies: []
  environment:
    name: review-$CI_BUILD_REF_NAME
    url: http://$CI_COMMIT_REF_SLUG.ci.vidjil.org/?data=analysis-example.vidjil
    on_stop: stop_deploy_review
  only:
    - /^feature-.*c.*\/.*$/
    - /^hotfix-.*c.*\/.*$/
  tags:
    - web
  extends:
    - .need_for_independant_test
  allow_failure: true

deploy_review_server:
  stage: deploy_review
  script:
    - make -C browser icons
    - cp ./docker/vidjil-client/conf/conf.js ./browser/js/conf.js
    - sed -i -r "s/localhost/${CI_COMMIT_REF_SLUG}.server.ci.vidjil.org/g" ./browser/js/conf.js
    - 'sed -i "s/\"server_id\" : \"\"/\"server_id\" : \"${CI_COMMIT_REF_SLUG}.server.ci.vidjil.org\"/" ./browser/js/conf.js'
    - sed -r 's/^.*FILE_SOURCE.*$/FILE_SOURCE="\/usr\/share\/vidjil\/demo"/' ./docker/vidjil-server/conf/defs.py > ./server/py4web/apps/vidjil/defs.py
    - sed -i -e "/EMAIL_SUBJECT_START/c EMAIL_SUBJECT_START='[Vidjil/CI][$CI_COMMIT_REF_NAME]'" -e '/FROM_EMAIL/c FROM_EMAIL="server.ci@vidjil.org"' ./server/py4web/apps/vidjil/defs.py
    - sed -ri 's/^(uwsgi_pass )\$upstream_(.*)$/\1\2/g' docker/vidjil-client/conf/uwsgi.conf
    - mv docker docker_${CI_COMMIT_REF_SLUG}
    - cd docker_${CI_COMMIT_REF_SLUG}
    - sed -i 's/latest/test/g' ./docker-compose.yml
    - sed -i "s/virtual_host/${CI_COMMIT_REF_SLUG}/" docker-compose-ci-review.yml
    - mv docker-compose-ci.yml docker-compose.override.yml
    - cp .env-default .env
    - sed -i '/ports/,+2d' docker-compose.yml
    - sed -i -r "s/py4web_admin_password/$REVIEW_SERVER_ADMIN_PASSWORD/" .env
    - cd ..
    - rsync -av --exclude .git . $REVIEW_SERVER:$REVIEW_SERVER_PATH_SERVER${CI_COMMIT_REF_SLUG} || $(case "$?" in 0|23) exit 0 ;; *) exit $?; esac)
    - 'ssh $REVIEW_SERVER "cd $REVIEW_SERVER_PATH_SERVER;
        ./install_certs.sh ${CI_COMMIT_REF_SLUG}; 
        cd ${CI_COMMIT_REF_SLUG}/docker_${CI_COMMIT_REF_SLUG}; 
        echo "TIME - before pulling docker images - $(date)";
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
        docker pull $CI_REGISTRY_IMAGE/$IMAGE_NAME_CLIENT;
        docker pull $CI_REGISTRY_IMAGE/$IMAGE_NAME_SERVER;
        docker tag $CI_REGISTRY_IMAGE/$IMAGE_NAME_CLIENT vidjil/client:test;
        docker tag $CI_REGISTRY_IMAGE/$IMAGE_NAME_SERVER vidjil/server:test;
        echo "TIME - after pulling docker images - $(date)";
        mkdir -p postfix/ssl; 
        cat docker-compose.yml; 
        ls; 
        docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose-ci-review.yml config; 
        docker-compose --version; 
        docker-compose down && docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose-ci-review.yml up -d; 
        sleep 20s; 
        docker exec docker_${CI_COMMIT_REF_SLUG}_mysql_1 bash -c ''chmod 0777 /var/lib/mysql/vidjil -R'';
        docker exec docker_${CI_COMMIT_REF_SLUG}_uwsgi_1 bash -c ''chmod 0777 /usr/share/vidjil/server/py4web/apps/vidjil/databases -R'';
        docker exec docker_${CI_COMMIT_REF_SLUG}_uwsgi_1 bash -c ''chmod 0777 /mnt/result/results   -R'';
        docker exec docker_${CI_COMMIT_REF_SLUG}_uwsgi_1 bash -c ''chmod 0777 /mnt/result/tmp '';
        docker exec docker_${CI_COMMIT_REF_SLUG}_uwsgi_1 bash -c ''chmod 0777 /mnt/upload/uploads  -R'';
        docker exec docker_${CI_COMMIT_REF_SLUG}_uwsgi_1 bash -c ''cd /usr/share/vidjil/server/py4web/apps/vidjil/scripts; python3 load-sql.py -i /usr/share/vidjil/docker/ci/ci.sql'';
        "'
  environment:
    name: review_server-$CI_COMMIT_REF_SLUG
    url: http://$CI_COMMIT_REF_SLUG.server.ci.vidjil.org/
    on_stop: stop_deploy_review_server
    auto_stop_in: 2 months
  dependencies: []
  only:
    - /^feature-.*s.*\/.*$/
    - /^hotfix-.*s.*\/.*$/
  extends:
    - .need_for_independant_test
  variables:
    IMAGE_NAME_CLIENT: dev-client/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}
    IMAGE_NAME_SERVER: dev-server/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}
  needs:
    - [build_test_server_docker]
  allow_failure: true

deploy_client:
  stage: deploy_prod
  image: testcontainers/sshd
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh    
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts  
  script:
    - ssh vidjil@$PROD_CLIENT_SERVER "
         cd $PROD_CLIENT_PATH
         && git fetch
         && git reset --hard origin/prod-client
         && make germline
         && cp doc/analysis-example.vidjil browser/
         && cd docker
         && docker-compose up -d nginx"
  environment:
    name: production
    url: https://$PROD_CLIENT_SERVER/?data=analysis-example.vidjil
  only:
    - prod-client
  tags:
    - cidocker
  needs:
    - deploy_docker
  
    
build_test_server_docker:
  stage: build_test_server_docker
  image: docker:latest
  services:
    - docker:dind
  before_script: []
  script:
    - echo $CI_REGISTRY_IMAGE:$IMAGE_NAME
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # build and push the image to be used in subsequent stages
    - 'docker build 
        --no-cache
        --build-arg git_branch=$CI_COMMIT_REF_NAME 
        --build-arg build_env=TEST 
        -t ${CI_REGISTRY_IMAGE}/$IMAGE_NAME
        docker/vidjil-$TYPE'
    # Push image as commit and branch name to allow to use cache if another commit come to this branch
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME
  parallel:
    matrix:
      - TYPE: [client, server]
  variables:
    IMAGE_NAME: dev-$TYPE/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}
  only:
    - /^prod-server/
    - /^prod-client/
    - /^feature-.*s.*\/.*$/
    - /^feature-.*c.*\/.*$/
    - /^feature-.*t.*\/.*$/
    - /^hotfix-.*s.*\/.*$/
    - /^hotfix-.*c.*\/.*$/
    - /^hotfix-.*t.*\/.*$/
    - dev
  tags:
    - ci.inria.fr
    - small
  needs:
    - []

    
deploy_docker:
  stage: publish_release
  script:
    - export CUR_DATE=`date +%Y-%m-%d`
    - export TYPE=`echo $CI_COMMIT_REF_NAME | awk '{ gsub(/prod-/, "") }{ print $1 }'`
    - export SHA=`echo $CI_COMMIT_SHA | awk '{ print substr($0, 0, 8) }'`
    - export TAG="vidjil/$TYPE:$CUR_DATE-$SHA"
    - docker login -u "$CI_DOCKER_USER" -p "$CI_DOCKER_PASSWORD" $CI_DOCKER
    - docker build --no-cache --build-arg git_branch=$CI_COMMIT_REF_NAME --build-arg build_env=PRODUCTION -t $TAG docker/vidjil-$TYPE
    - docker push $TAG
    - docker tag $TAG "vidjil/$TYPE:latest"
    - docker push "vidjil/$TYPE:latest"
    - docker rmi $TAG "vidjil/$TYPE:latest"
  when: manual
  only:
    - /^prod-server/
    - /^prod-client/
  tags:
    - web
    - docker

deploy_germlines:
  stage: deploy_prod
  script:
    - make -C germline get-all-data
    - make -C germline js
    - date=$(date +%Y-%m-%d)
    - tar cvzf germline-$date.tar.gz germline/*/*.fa germline/IMGT_RELEASE browser/js/germline.js
    - scp germline-$date.tar.gz $VIDJIL_WWW:$REMOTE_GERMLINE_DIR
  only:
    - manual
    - /^feature-.*g.*\/.*$/
    


stop_deploy_review:
  stage: deploy_review
  variables:
    GIT_STRATEGY: none
  script:
    - ssh $REVIEW_SERVER "rm -rf $REVIEW_SERVER_PATH$CI_COMMIT_REF_SLUG"
  when: manual
  environment:
    name: review-$CI_BUILD_REF_NAME
    action: stop
  dependencies: []
  only:
    - /^feature-.*c.*\/.*$/
    - /^hotfix-.*c.*\/.*$/
  tags:
    - web

stop_deploy_review_server:
  stage: deploy_review
  script:
    - ssh $REVIEW_SERVER "set -o xtrace; docker-compose -f $REVIEW_SERVER_PATH_SERVER${CI_COMMIT_REF_SLUG}/docker_${CI_COMMIT_REF_SLUG}/docker-compose.yml down -v ; rm -rf $REVIEW_SERVER_PATH_SERVER${CI_COMMIT_REF_SLUG}; $REVIEW_SERVER_PATH_SERVER/uninstall_certs.sh ${CI_COMMIT_REF_SLUG}"
  when: manual
  dependencies: []
  environment:
    name: review_server-$CI_COMMIT_REF_SLUG
    action: stop
  only:
    - /^feature-.*s.*\/.*$/
    - /^hotfix-.*s.*\/.*$/

