# Step 0, independant: deploy_review, deploy_review_server
# Step 1, quicker: test_tools, test_browser_unit, code_quality_custom, test_server_unit
# Step 2, moderate:
#   client: client_firefox_supported, tuto-c1-ff-supported
#   server: server_firefox_supported, tuto-s1-ff-supported
# Step 3, late, longuer or tricky: 


.before_script_global: &before_script_global
  - make demo
  - make data
  - make germline
  - make -C browser sha1
  - cp -p doc/analysis-example.vidjil browser/

.before_script_global_docker: &before_script_global_docker
  before_script:
    - apt update && apt upgrade -y && apt install -y make unzip wget
    - *before_script_global

before_script:
  - *before_script_global

stages:
  - test_tools
  - test_quality
  - test_unit
  - deploy_review
  - test_germlines
  - test_functional
  - test_cypress_client
  - test_cypress_external
  - test_cypress_server
  - test_tutorial
  - test_tutorial_server
  - test_shouldvdj
  - coverage
  - tgz_release
  - valgrind_unit
  - valgrind_functional
  - multiple_tests
  - benchmark
  - publish_release
  - deploy_prod


# Tools

test_tools:
  stage: test_tools
  script: make -C tools/tests
  extends:
    - .need_for_quick_test


# Germlines

test_germlines:
  image: vidjilci/cypress_with_browsers:latest
  stage: test_germlines
  script:
    - make -C germline get-all-data
    - make -C germline tests
  only:
    - /^feature-.*g.*\/.*$/
  tags:
    - cidocker


# Includes

include:
  - local: '.gitlab-test-reproducibility.yml' # launch tests many times
  - local: '/doc/.gitlab-ci.yml' # Doc
  - local: 'algo/.gitlab-ci-compilers.yml' # Stage multiple_tests
  - local: 'algo/.gitlab-ci.yml' # Vidjil-algo pipelines
  - local: 'browser/.gitlab-ci.yml' # Client pipelines
  - local: 'server/.gitlab-ci.yml' # Server pipelines
  - template: Code-Quality.gitlab-ci.yml # Code quality

###########################
###  Needs declaration  ###
###########################
.need_for_independant_test:
  needs: []

.need_for_quick_test:
  needs: []

### Client part should not containt server stage
.need_for_moderate_client:
  needs: [test_tools, test_browser_unit, code_quality_custom]
.need_for_late_client:
  needs: [client1-ff-supported, tuto-c1-ff-supported]
.need_for_staged_client:
  needs: [client1-ff-supported, tuto-c1-ff-supported]

### Server part should not containt client stage
.need_for_moderate_server:
  needs: [test_tools, test_server_unit]
.need_for_late_server:
  needs: [server1-ff-supported, tuto-s1-ff-supported]
.need_for_staged_server:
  needs: [server1-ff-supported, tuto-s1-ff-supported]



# Algorithm

algo_valgrind_unit:
  stage: valgrind_unit
  script: make -C algo valgrind_unit
  only:
    - /^feature-.*a.*\/.*$/
    - schedules
  tags:
    - valgrind

.snip_valgrind_functional: &valgrind_functional
  stage: valgrind_functional
  script: make -C algo valgrind_should
  tags:
    - valgrind

algo_valgrind_functional:
  <<: *valgrind_functional
  when: manual
  dependencies: []
  only:
    - /^feature-.*a.*\/.*$/
    - schedules

release_valgrind_functional:
  <<: *valgrind_functional
  allow_failure: true
  only:
    - /^feature-.*a.*\/release$/

tgz_release:
  stage: tgz_release
  script: make -C algo release RELEASE_TAG=`cat algo/release`
  only:
    - /^feature-.*a.*\/release$/
  artifacts:
    paths:
    - algo/releases/vidjil-algo-`cat algo/release`.tar.gz
    - algo/releases/vidjil-algo-`cat algo/release`/vidjil-algo-`cat algo/release`_`uname -m`
    expire_in: 10 years
  allow_failure: false
  tags:
    - ubuntu-16.04-amd64

copy_release:
  stage: publish_release
  script:
    - |
      for repo in $ALGO_REPOSITORIES; do
        echo "Copying release to $repo"
        scp algo/releases/vidjil-algo*.tar.gz algo/releases/vidjil-algo*/vidjil-algo-*_* $repo
      done
      release_name=$(cat algo/release)
      ssh $VIDJIL_WWW "cd /var/www/html/releases; ln -sf vidjil-algo-${release_name}.tar.gz vidjil-algo-latest.tgz; ln -sf vidjil-algo-${release_name}_x86_64 vidjil-algo-latest_x86_64"
      ssh $VIDJIL_BONSAI "cd /bio1/www/html/vidjil; scp vidjil-algo-${release_name}* $VIDJIL_BONSAI_PROD:/bio1/www/html/vidjil"
  when: manual
  only:
    - /^feature-.*a.*\/release$/

deploy_release_prod:
  stage: deploy_prod
  when: manual
  only:
    - /^feature-.*a.*\/release$/
  script:
    - |
      release_name=$(cat algo/release)
      ssh $DEPLOY_SERVER "cd releases/vidjil;\
          tar xvzf vidjil-algo-${release_name}.tar.gz;\
          make -C vidjil-algo-${release_name};\
          ln -sfT vidjil-algo-${release_name} next"

# Client

test_browser_unit:
  stage: test_unit
  script: make unit_browser
  artifacts:
    paths:
    - browser/
    when: always
  only:
    - /^feature-.*c.*\/.*$/
    - /^hotfix-.*c.*\/.*$/
    - /^prod-client/
    - dev
    - schedules
  tags:
    - web
  extends:
    - .need_for_quick_test



# Code quality

code_quality:
  stage: test_quality
  artifacts:
    paths: [gl-code-quality-report.json]

code_quality_custom:
  stage: test_quality
  script: make -C browser quality
  only:
    - /^feature-.*c.*\/.*$/
    - /^hotfix-.*c.*\/.*$/
    - /^prod-client/
    - dev
    - schedules
  tags:
    - web
  extends:
    - .need_for_quick_test

# Server

test_server_unit:
    image: python:2.7-slim
    stage: test_unit
    <<: *before_script_global_docker
    script:
      - apt-get update && apt-get upgrade -y && apt-get install -y --no-install-recommends gcc libldap2-dev libssl-dev libsasl2-dev python-ijson libyajl2 python-cffi wget unzip procps
      - pip install -r requirements.txt
      - make -C server install_web2py_standalone
      - make -C server launch_fuse_server
      - make unit_server
    artifacts:
      reports:
        junit: server/web2py/test-reports/TEST*xml
    only:
      - /^feature-.*s.*\/.*$/
      - /^hotfix-.*s.*\/.*$/
      - /^prod-server/
      - dev
      - schedules
    tags:
      - cidocker
    extends:
      - .need_for_quick_test

.test_server_base:
  stage: test_functional
  before_script:
    - docker build --no-cache --build-arg git_branch=$CI_COMMIT_REF_NAME --build-arg build_env=TEST -t "vidjil/server:test" docker/vidjil-server
    - docker build --no-cache --build-arg git_branch=$CI_COMMIT_REF_NAME --build-arg build_env=TEST -t "vidjil/client:test" docker/vidjil-client
    - sed -i '/\:\/etc\/nginx\/ssl/d' ./docker/docker-compose.yml
    - sed -i '/\/var\/lib\/mysql/d' ./docker/docker-compose.yml
    - sed -i 's/\/opt\/vidjil\/databases/databases/' ./docker/docker-compose.yml
    - echo -e "volumes:\n    databases:" >> ./docker/docker-compose.yml
    - sed -i 's/\:latest/\:test/g' ./docker/docker-compose.yml
    - cd docker/vidjil-server/conf/ && mv defs.py defs_https.py && mv defs_http.py defs.py && cd ../../..
    - make germline && cp browser/js/germline.js docker/vidjil-client/conf
    - mkdir -p docker/postfix/ssl
    - cd docker && docker-compose up -d && cd ..
    - sed -i "s/^python\ \.\.\/\.\.\/\.\./docker\ exec\ docker_uwsgi_1\ python\ \/usr\/share\/vidjil\/server\/web2py/" server/web2py/applications/vidjil/tests/init_tests.sh
    - docker exec docker_uwsgi_1 sed -i "s/^\(FILE_SOURCE .*\)/FILE_SOURCE = '\/usr\/share\/vidjil\/demo'/" /usr/share/vidjil/server/web2py/applications/vidjil/modules/defs.py
    - docker exec docker_nginx_1 make -C /usr/share/vidjil browser
  after_script:
    - cd docker && docker-compose down -v
    - docker rmi "vidjil/server:test" "vidjil/client:test" reporter:test
  artifacts:
    reports:
      junit: server/web2py/applications/vidjil/tests/test/TEST-*.xml
    when: always
    expire_in: 1 week
    paths:
    - server/web2py/ap‎plications/vidjil‎/tests/
  only:
    - /^feature-.*s.*\/.*$/
    - /^hotfix-.*s.*\/.*$/
    - /^prod-server/
    - dev
    - schedules
  tags:
    - x86_64
    - docker

.test_server_functional:
  stage: test_functional
  extends: .test_server_base
  script:
    - source /etc/profile.d/rvm.sh
    - rvm use 2.6.1
    - HEADLESS=1 make functional_server
  artifacts:
    reports:
      junit: server/web2py/applications/vidjil/tests/test/TEST-*.xml
    paths:
      - browser/
      - server/web2py/applications/vidjil/
    when: always


ff45-server-functional:
  extends:
    - .test_server_functional
    - .need_for_moderate_server
  variables:
    FIREFOX_VERSION: 45



# Deployment

deploy_review:
  stage: deploy_review
  script:
    - make -C browser icons
    - echo "$REVIEW_CONFIG_JS" > browser/js/conf.js
    - rsync -av --delete browser $REVIEW_SERVER:$REVIEW_SERVER_PATH$CI_BUILD_REF_SLUG
  dependencies: []
  environment:
    name: review/$CI_BUILD_REF_NAME
    url: http://$CI_BUILD_REF_SLUG.ci.vidjil.org/?data=analysis-example.vidjil
    on_stop: stop_deploy_review
  only:
    - /^feature-.*c.*\/.*$/
    - /^hotfix-.*c.*\/.*$/
  tags:
    - web
  extends:
    - .need_for_independant_test

deploy_review_server:
  stage: deploy_review
  script:
    - make -C browser icons
    - cp ./docker/vidjil-client/conf/conf.js ./browser/js/conf.js
    - sed -i -r "s/localhost/${CI_BUILD_REF_SLUG}.server.ci.vidjil.org/g" ./browser/js/conf.js
    - 'sed -i "s/\"server_id\" : \"\"/\"server_id\" : \"${CI_BUILD_REF_SLUG}.server.ci.vidjil.org\"/" ./browser/js/conf.js'
    - sed -r 's/^.*FILE_SOURCE.*$/FILE_SOURCE="\/usr\/share\/vidjil\/demo"/' ./docker/vidjil-server/conf/defs.py > ./server/web2py/applications/vidjil/modules/defs.py
    - sed -i -e "/EMAIL_SUBJECT_START/c EMAIL_SUBJECT_START='[Vidjil/CI][$CI_COMMIT_REF_NAME]'" -e '/FROM_EMAIL/c FROM_EMAIL="server.ci@vidjil.org"' ./server/web2py/applications/vidjil/modules/defs.py
    - sed -ri 's/^(uwsgi_pass )\$upstream_(.*)$/\1\2/g' docker/vidjil-client/conf/uwsgi.conf
    - mkdir browser/cgi
    - cp docker/vidjil-client/conf/*.cgi browser/cgi
    - mv docker docker_${CI_BUILD_REF_SLUG}
    - cd docker_${CI_BUILD_REF_SLUG}
    - TMP_DOCKER=$(tempfile)
    - cp docker-compose.yml $TMP_DOCKER
    - awk -f ci/for-review.awk $TMP_DOCKER > docker-compose.yml
    - rm -f $TMP_DOCKER
    - sed -i -r "s/WEB2PY_ADMIN_PASSWORD=/WEB2PY_ADMIN_PASSWORD=$REVIEW_SERVER_ADMIN_PASSWORD/" docker-compose.yml
    - cd ..
    - rsync -av --exclude .git . $REVIEW_SERVER:$REVIEW_SERVER_PATH_SERVER$CI_BUILD_REF_SLUG || $(case "$?" in 0|23) exit 0 ;; *) exit $?; esac)
    - ssh $REVIEW_SERVER "cd $REVIEW_SERVER_PATH_SERVER; ./install_certs.sh ${CI_BUILD_REF_SLUG}; cd ${CI_BUILD_REF_SLUG}/docker_${CI_BUILD_REF_SLUG}; mkdir -p postfix/ssl; docker-compose up -d mysql fuse uwsgi nginx workers; sleep 20s; docker-compose exec -T uwsgi bash -c 'cd /usr/share/vidjil/server/web2py/applications/vidjil/scripts; /usr/local/bin/gosu 1005 bash launch_python_script.sh load-sql.py -n /usr/share/vidjil/docker/ci/ci.sql'"
  environment:
    name: review_server/$CI_BUILD_REF_NAME
    url: http://$CI_BUILD_REF_SLUG.server.ci.vidjil.org/
    on_stop: stop_deploy_review_server
    auto_stop_in: 2 months
  dependencies: []
  only:
    - /^feature-.*s.*\/.*$/
    - /^hotfix-.*s.*\/.*$/
  extends:
    - .need_for_independant_test

deploy_docker:
  stage: deploy_prod
  script:
    - export CUR_DATE=`date +%Y-%m-%d`
    - export TYPE=`echo $CI_COMMIT_REF_NAME | awk '{ gsub(/prod-/, "") }{ print $1 }'`
    - export SHA=`echo $CI_COMMIT_SHA | awk '{ print substr($0, 0, 8) }'`
    - export TAG="vidjil/$TYPE:$CUR_DATE-$SHA"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --no-cache --build-arg git_branch=$CI_COMMIT_REF_NAME --build-arg build_env=PRODUCTION -t $TAG docker/vidjil-$TYPE
    - docker push $TAG
    - docker tag $TAG "vidjil/$TYPE:latest"
    - docker push "vidjil/$TYPE:latest"
    - docker rmi $TAG "vidjil/$TYPE:latest"
  when: manual
  only:
    - /^prod-server/
    - /^prod-client/
  tags:
    - web
    - docker

deploy_prod:
  stage: deploy_prod
  script:
    - ssh $PROD_CLIENT_SERVER "
         cd $PROD_CLIENT_PATH;"
  environment:
    name: production
    url: http://$PROD_CLIENT_SERVER/?data=analysis-example.vidjil
  only:
    - /^prod-client/
  tags:
    - web

deploy_germlines:
  stage: deploy_prod
  script:
    - make -C germline get-all-data
    - make -C germline js
    - date=$(date +%Y-%m-%d)
    - tar cvzf germline-$date.tar.gz germline/*/*.fa germline/IMGT_RELEASE browser/js/germline.js
    - scp germline-$date.tar.gz $VIDJIL_WWW:$REMOTE_GERMLINE_DIR
  only:
    - manual
    - /^feature-.*g.*\/.*$/
    


stop_deploy_review:
  stage: deploy_review
  variables:
    GIT_STRATEGY: none
  script:
    - ssh $REVIEW_SERVER "rm -rf $REVIEW_SERVER_PATH$CI_BUILD_REF_SLUG"
  when: manual
  environment:
    name: review/$CI_BUILD_REF_NAME
    action: stop
  dependencies: []
  only:
    - /^feature-.*c.*\/.*$/
    - /^hotfix-.*c.*\/.*$/
  tags:
    - web

stop_deploy_review_server:
  stage: deploy_review
  script:
    - ssh $REVIEW_SERVER "set -o xtrace; docker-compose -f $REVIEW_SERVER_PATH_SERVER$CI_BUILD_REF_SLUG/docker_$CI_BUILD_REF_SLUG/docker-compose.yml down -v ; rm -rf $REVIEW_SERVER_PATH_SERVER$CI_BUILD_REF_SLUG; $REVIEW_SERVER_PATH_SERVER/uninstall_certs.sh $CI_BUILD_REF_SLUG"
  when: manual
  dependencies: []
  environment:
    name: review_server/$CI_BUILD_REF_NAME
    action: stop
  only:
    - /^feature-.*s.*\/.*$/
    - /^hotfix-.*s.*\/.*$/

